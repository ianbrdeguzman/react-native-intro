{"version":3,"sources":["src/context/theme.tsx","src/utils/GlobalStyles.ts","src/components/Header/index.tsx","src/routes/index.ts","src/components/TodoForm/index.tsx","src/redux/features/todoSlice.ts","src/utils/nanoid.ts","src/redux/hooks.ts","src/screens/AddTodo.tsx","src/components/TodoItem/index.tsx","src/components/TodoList/index.tsx","src/utils/storage.ts","src/components/ConfirmDeleteModal/index.tsx","src/components/FilterButtons/index.tsx","src/utils/filter.ts","src/components/SearchBar/index.tsx","src/components/AddTodoButton/index.tsx","src/screens/ListTodos.tsx","src/screens/EditTodo.tsx","src/screens/Main.tsx","src/hooks/useSplashScreen.tsx","src/redux/store.ts","App.tsx","assets/fonts/Inter-Black.otf"],"names":["Theme","ThemeContext","createContext","theme","LIGHT","setAppTheme","ThemeProvider","children","useState","DARK","setTheme","Provider","value","useAppTheme","useContext","GlobalStyles","StyleSheet","create","fontBold","fontFamily","font","Header","navigation","back","SafeAreaView","style","styles","container","StatusBar","hidden","View","logoContainer","Pressable","onPress","goBack","name","size","color","Text","title","switchContainer","Switch","switch","trackColor","false","true","ios_backgroundColor","thumbColor","onValueChange","Feather","padding","flexDirection","alignItems","justifyContent","backgroundColor","marginRight","fontSize","paddingRight","transform","scale","routes","TodoForm","todo","onChangeText","showDetails","setShowDetails","inputLabel","TextInput","input","inputDisabled","id","editable","placeholder","placeholderTextColor","text","autoFocus","switchText","version","toString","Date","createdAt","toLocaleString","updatedAt","button","buttonText","Filter","flex","marginTop","borderRadius","borderBottomWidth","borderBottomColor","position","top","right","zIndex","marginLeft","paddingVertical","paddingHorizontal","borderWidth","alignSelf","nanoid","customAlphabet","initialState","todos","filter","ALL","query","selected","modal","todoSlice","createSlice","reducers","addTodo","state","action","payload","trim","completed","now","updateTodo","find","deleteTodo","completeTodo","map","changeInput","changeFilter","changeQuery","changeSelected","initTodos","showModal","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","AddTodo","useNavigation","dispatch","navigate","TodoItem","handleDeleteOnPress","handleEditOnPress","item","handleCheckboxOnChange","Checkbox","numberOfLines","buttonsContainer","marginBottom","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","textDecorationStyle","textDecorationLine","TodoList","FlatList","data","renderItem","todoId","ListEmptyComponent","textAlign","saveData","a","async","AsyncStorage","setItem","console","warn","loadData","getItem","stringData","JSON","parse","ConfirmDeleteModal","visible","onRequestClose","handleCancleOnpress","handleConfirmOnPress","Modal","testID","transparent","content","getIcon","COMPLETED","ACTIVE","FilterButtons","handleFilterOnPress","filterItem","active","TouchableOpacity","filterItemActive","filterItemText","paddingLeft","textTransform","queryTodos","toLowerCase","includes","SearchBar","onSubmitEditing","marginVertical","borderColor","left","bottom","AddTodoButton","handleAddTodoOnPress","ListTodos","useEffect","initialize","stringify","filteredTodos","useMemo","completedTodos","activeTodos","filterTodos","Keyboard","dismiss","EditTodo","route","params","RootStack","createStackNavigator","Main","isAppReady","setIsAppReady","SplashScreen","Font","require","RobotoMono_400Regular","RobotoMono_700Bold","setTimeout","useSplashScreen","NavigationContainer","Navigator","initialRouteName","screenOptions","header","props","Screen","component","store","configureStore","reducer","todoSliceReducer","App","module","exports"],"mappings":"6HAEYA,E,gHAAAA,K,cAAAA,E,aAAAA,M,KAUZ,IAAMC,EAAeC,wBAAiC,CACpDC,MAAOH,EAAMI,MACbC,YAAa,eAGFC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxC,EAA0BC,mBAAgBR,EAAMS,MAAhD,WAAON,EAAP,KAAcO,EAAd,KAMA,OACE,cAACT,EAAaU,SAAd,CAAuBC,MAAO,CAAET,QAAOE,YALrB,WAClBK,EAASP,IAAUH,EAAMS,KAAOT,EAAMI,MAAQJ,EAAMS,QAIpD,SACGF,KAKMM,EAAc,kBAAMC,qBAAWb,I,mCCnB7Bc,EAVM,kBACnBC,IAAWC,OAAO,CAChBC,SAAU,CACRC,WAAY,sBAEdC,KAAM,CACJD,WAAY,4BCCX,SAASE,EAAT,GAA+D,IAA7CC,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,KACnC,EAA+BV,IAAvBV,EAAR,EAAQA,MAAOE,EAAf,EAAeA,YAEf,OACE,eAACmB,EAAA,EAAD,CAAcC,MAAOC,EAAOvB,GAAOwB,UAAnC,UACE,cAACC,EAAA,EAAD,CAAWC,QAAQ,IACnB,eAACC,EAAA,EAAD,CAAML,MAAOC,EAAOvB,GAAO4B,cAA3B,UACGR,GACC,cAACS,EAAA,EAAD,CAAWC,QAASX,EAAWY,OAA/B,SACE,cAAC,IAAD,CACEC,KAAK,OACLC,KAAM,GACNX,MAAOC,EAAOvB,GAAOoB,KACrBc,MAAM,cAIZ,cAACC,EAAA,EAAD,CAAMb,MAAO,CAACV,IAAeG,SAAUQ,EAAOvB,GAAOoC,OAArD,4BAIF,eAACT,EAAA,EAAD,CAAML,MAAOC,EAAOvB,GAAOqC,gBAA3B,UACE,cAACC,EAAA,EAAD,CACEhB,MAAOC,EAAOvB,GAAOuC,OACrBC,WAAY,CAAEC,MAAO,UAAWC,KAAM,WACtCC,oBAAoB,UACpBC,WAAY5C,IAAUH,EAAMS,KAAO,UAAY,SAC/CuC,cAAe3C,EACfO,MAAOT,IAAUH,EAAMS,OAEzB,cAACwC,EAAA,EAAD,CACEd,KAAMhC,IAAUH,EAAMS,KAAO,OAAS,MACtC2B,KAAM,GACNC,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,iBAOpD,IAAMiB,EAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACTuB,QAAS,GACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,gBAChBC,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,iBAEtDsB,cAAe,CACboB,cAAe,MACfC,WAAY,UAEd7B,KAAM,CACJgC,YAAa,IAEfhB,MAAO,CACLiB,SAAU,GACVnB,MAAO,WAETG,gBAAiB,CACfW,cAAe,MACfC,WAAY,SACZK,aAAc,GAEhBf,OAAQ,CACNgB,UAAW,CAAC,CAAEC,MAAO,S,0CC3EpB,IAAMC,EACL,eADKA,EAEN,cAFMA,EAGL,e,gBCmBD,SAASC,EAAT,GAOY,IANjBC,EAMgB,EANhBA,KACAlD,EAKgB,EALhBA,MACAmD,EAIgB,EAJhBA,aACA9B,EAGgB,EAHhBA,QACA+B,EAEgB,EAFhBA,YACAC,EACgB,EADhBA,eAEQ9D,EAAUU,IAAVV,MAER,OACE,eAAC2B,EAAA,EAAD,CAAML,MAAOC,EAAOvB,GAAOwB,UAA3B,UACE,cAACW,EAAA,EAAD,CAAMb,MAAOC,EAAOvB,GAAOoC,MAA3B,SACGuB,EAAO,YAAc,iBAEvBA,EACC,eAAChC,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAMb,MAAO,CAACV,IAAeG,SAAUQ,EAAOvB,GAAO+D,YAArD,gBAGA,cAACC,EAAA,EAAD,CACE1C,MAAO,CACLV,IAAeK,KACfM,EAAOvB,GAAOiE,MACd1C,EAAOvB,GAAOkE,eAEhBzD,MAAOkD,EAAKQ,GACZC,UAAU,OAGd,eAACzC,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAMb,MAAO,CAACV,IAAeG,SAAUQ,EAAOvB,GAAO+D,YAArD,mBAGA,cAACC,EAAA,EAAD,CACE1C,MAAO,CAACV,IAAeK,KAAMM,EAAOvB,GAAOiE,OAC3CI,YAAaV,EAAOA,EAAKvB,MAAQ,QACjCkC,qBAAqB,OACrBV,aAAc,SAACW,GAAD,OAAUX,EAAaW,IACrC9D,MAAOA,EACP+D,WAAW,OAGf,eAAC7C,EAAA,EAAD,CAAML,MAAOC,EAAOvB,GAAOqC,gBAA3B,UACE,cAACF,EAAA,EAAD,CAAMb,MAAO,CAACV,IAAeK,KAAMM,EAAOvB,GAAOyE,YAAjD,0BAGA,cAACnC,EAAA,EAAD,CACEhB,MAAOC,EAAOvB,GAAOuC,OACrBK,WAAY5C,IAAUH,EAAMS,KAAO,UAAY,gBAC/CkC,WAAY,CACVC,MAAO,UACPC,KAAM1C,IAAUH,EAAMS,KAAO,UAAY,WAE3CqC,oBACE3C,IAAUH,EAAMS,KAAO,UAAY,cAErCG,MAAOoD,EACPhB,cAAeiB,OAGlBD,GACC,eAAClC,EAAA,EAAD,WACE,eAACA,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CACEb,MAAO,CAACV,IAAeG,SAAUQ,EAAOvB,GAAO+D,YADjD,qBAKA,cAACC,EAAA,EAAD,CACE1C,MAAO,CACLV,IAAeK,KACfM,EAAOvB,GAAOiE,MACd1C,EAAOvB,GAAOkE,eAEhBzD,MAAOkD,EAAKe,QAAQC,WACpBP,UAAU,OAGd,eAACzC,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CACEb,MAAO,CAACV,IAAeG,SAAUQ,EAAOvB,GAAO+D,YADjD,wBAKA,cAACC,EAAA,EAAD,CACE1C,MAAO,CACLV,IAAeK,KACfM,EAAOvB,GAAOiE,MACd1C,EAAOvB,GAAOkE,eAEhBzD,MAAO,IAAImE,KAAKjB,EAAKkB,WAAWC,iBAChCV,UAAU,OAGd,eAACzC,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CACEb,MAAO,CAACV,IAAeG,SAAUQ,EAAOvB,GAAO+D,YADjD,wBAKA,cAACC,EAAA,EAAD,CACE1C,MAAO,CACLV,IAAeK,KACfM,EAAOvB,GAAOiE,MACd1C,EAAOvB,GAAOkE,eAEhBzD,MACEkD,EAAKoB,UACD,IAAIH,KAAJ,MAASjB,OAAT,EAASA,EAAMoB,WAAWD,iBAC1B,MAENV,UAAU,aAOpB,cAACJ,EAAA,EAAD,CACE1C,MAAOC,EAAOvB,GAAOiE,MACrBI,YAAY,QACZC,qBAAqB,OACrBV,aAAc,SAACW,GAAD,OAAUX,EAAaW,IACrC9D,MAAOA,EACP+D,WAAW,IAGf,cAAC3C,EAAA,EAAD,CAAWP,MAAOC,EAAOvB,GAAOgF,OAAQlD,QAASA,EAAjD,SACE,cAACK,EAAA,EAAD,CAAMb,MAAOC,EAAOvB,GAAOiF,WAA3B,SAAwCtB,EAAO,SAAW,cAMlE,IC3JYuB,ED2JN3D,EAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACT2D,KAAM,EACNpC,QAAS,GACTI,gBAAiBnD,IAAUH,EAAMS,KAAO,OAAS,WAEnD8B,MAAO,CACLiB,SAAU,GACVnB,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,WAE5C2D,MAAO,CACLlB,QAAS,GACTqC,UAAW,GACX/B,SAAU,GACVF,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,UACpD+E,aAAc,EACdC,kBAAmB,EACnBC,kBAAmBvF,IAAUH,EAAMS,KAAO,UAAY,OACtD4B,MAAOlC,IAAUH,EAAMS,KAAO,QAAU,WAE1C4D,cAAe,CACbhC,MAAO,QAET6B,WAAY,CACV7B,MAAO,OACPsD,SAAU,WACVC,IAAK,GACLC,MAAO,GACPC,OAAQ,GAEVtD,gBAAiB,CACf+C,UAAW,GACXpC,cAAe,MACfC,WAAY,UAEdV,OAAQ,CACNqD,WAAY,EACZrC,UAAW,CAAC,CAAEC,MAAO,MAEvBiB,WAAY,CACVvC,MAAO,QAET8C,OAAQ,CACNa,gBAAiB,EACjBC,kBAAmB,GACnBV,UAAW,GACXW,YAAa,EACb/C,cAAe,MACfgD,UAAW,WACXX,aAAc,EACdlC,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,iBAEtD2E,WAAY,CACV/C,MAAO,c,iCElNA+D,EAASC,YAAe,mBAAoB,I,2kBDC7ChB,K,UAAAA,E,sBAAAA,E,iBAAAA,M,KAwBZ,IAAMiB,EAA6B,CACjCC,MAAO,GACP7B,KAAM,GACN8B,OAAQnB,EAAOoB,IACfC,MAAO,GACPC,SAAU,KACVC,OAAO,GAGIC,EAAYC,YAAY,CACnC3E,KAAM,OACNmE,eACAS,SAAU,CACRC,QAAS,SAACC,EAAOC,GACfD,EAAMV,MAAN,cACKU,EAAMV,OADX,CAEE,CACEjC,GAAI8B,IACJ7D,MAAO2E,EAAOC,QAAQC,OACtBC,WAAW,EACXxC,QAAS,EACTG,UAAWD,KAAKuC,SAGpBL,EAAMvC,KAAO,IAEf6C,WAAY,SACVN,EACAC,GAEA,IAAMpD,EAAOmD,EAAMV,MAAMiB,MAAK,SAAC1D,GAAD,OAAUA,EAAKQ,KAAO4C,EAAOC,QAAQ7C,MAC/DR,IACFA,EAAKvB,MAAQ2E,EAAOC,QAAQ5E,MAAM6E,OAClCtD,EAAKe,QAAUf,EAAKe,QAAU,EAC9Bf,EAAKoB,UAAYH,KAAKuC,OAExBL,EAAMvC,KAAO,IAEf+C,WAAY,SAACR,EAAOC,GAClBD,EAAMV,MAAQU,EAAMV,MAAMC,QAAO,SAAC1C,GAAD,OAAUA,EAAKQ,KAAO4C,EAAOC,YAEhEO,aAAc,SAACT,EAAOC,GACpBD,EAAMV,MAAQU,EAAMV,MAAMoB,KAAI,SAAC7D,GAAD,OAC5BA,EAAKQ,KAAO4C,EAAOC,QAAnB,OACSrD,GADT,IACeuD,WAAYvD,EAAKuD,YAC5BvD,MAGR8D,YAAa,SAACX,EAAOC,GACnBD,EAAMvC,KAAOwC,EAAOC,SAEtBU,aAAc,SAACZ,EAAOC,GACpBD,EAAMT,OAASU,EAAOC,SAExBW,YAAa,SAACb,EAAOC,GACnBD,EAAMP,MAAQQ,EAAOC,SAEvBY,eAAgB,SAACd,EAAOC,GACtBD,EAAMN,SAAWO,EAAOC,SAE1Ba,UAAW,SAACf,EAAOC,GACjBD,EAAMV,MAAQW,EAAOC,SAEvBc,UAAW,SAAChB,GACVA,EAAML,OAASK,EAAML,UAKpB,EAWHC,EAAUqB,QAVZlB,EADK,EACLA,QACAO,EAFK,EAELA,WACAE,EAHK,EAGLA,WACAC,EAJK,EAILA,aACAE,GALK,EAKLA,YACAC,GANK,EAMLA,aACAC,GAPK,EAOLA,YACAC,GARK,EAQLA,eACAC,GATK,EASLA,UACAC,GAVK,EAULA,UAGapB,KAAf,Q,SE1GasB,GAAiB,kBAAMC,gBACvBC,GAAkDC,KCKhD,SAASC,KACtB,IAAMjH,EACJkH,cACIC,EAAWN,KACTzD,EAAS2D,IAAe,SAACpB,GAAD,OAAWA,EAAMnD,QAAzCY,KAOR,OACE,cAAC5C,EAAA,EAAD,CAAML,MAAO,CAAE6D,KAAM,GAArB,SACE,cAACzB,EAAD,CACEjD,MAAO8D,EACPX,aAAc,SAACW,GAAD,OAAU+D,EAASb,GAAYlD,KAC7CzC,QAVgB,WAChByC,GAAM+D,EAASzB,EAAQtC,IAC3BpD,EAAWoH,SAAS9E,EAAa,S,uBCH9B,SAAS+E,GAAT,GAKY,IAJjBC,EAIgB,EAJhBA,oBACAC,EAGgB,EAHhBA,kBACAC,EAEgB,EAFhBA,KACAC,EACgB,EADhBA,uBAEQ5I,EAAUU,IAAVV,MAER,OACE,eAAC2B,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAOwB,UAA3B,UACE,cAACqH,GAAA,EAAD,CACEpI,MAAOkI,EAAKzB,UACZrE,cAAe+F,EACf1G,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,kBAE5C,cAAC6B,EAAA,EAAD,CACEb,MAAO,CACLV,IAAeK,KACfM,GAAOvB,GAAOuE,KACdoE,EAAKzB,WAAa3F,GAAOvB,GAAOkH,WAElC4B,cAAe,EANjB,SAQGH,EAAKvG,QAER,eAACT,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAO+I,iBAA3B,UACE,cAAClH,EAAA,EAAD,CAAWC,QAAS,kBAAM4G,EAAkBC,EAAKxE,KAAjD,SACE,cAAC,IAAD,CACEnC,KAAK,OACLC,KAAM,GACNC,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,UAC1CgB,MAAOC,GAAOvB,GAAOgF,WAGzB,cAACnD,EAAA,EAAD,CAAWC,QAAS2G,EAApB,SACE,cAAC,IAAD,CACEzG,KAAK,SACLC,KAAM,GACNC,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,oBAQtD,IAAMiB,GAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACTwB,cAAe,MACfC,WAAY,SACZE,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,QACpD0I,aAAc,EACdjG,QAAS,GACTsC,aAAc,EACd4D,YAAajJ,IAAUH,EAAMS,KAAO,QAAU,OAC9C4I,aAAc,CAAEC,MAAO,EAAGC,OAAQ,GAClCC,cAAe,GACfC,aAAc,EACdC,UAAW,GAEbhF,KAAM,CACJY,KAAM,EACNS,WAAY,GACZvC,SAAU,GACVnB,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,WAE5C4G,UAAW,CACThF,MAAO,OACPsH,oBAAqB,QACrBC,mBAAoB,gBAEtBV,iBAAkB,CAChB/F,cAAe,OAEjBgC,OAAQ,CACN5B,YAAa,OC7EZ,SAASsG,GAAT,GAIY,IAHjBtD,EAGgB,EAHhBA,MACAqC,EAEgB,EAFhBA,oBACAG,EACgB,EADhBA,uBAEMzH,EACJkH,cAeF,OACE,cAAC1G,EAAA,EAAD,CAAML,MAAOC,GAAOC,UAApB,SACE,cAACmI,GAAA,EAAD,CACEC,KAAMxD,EACNyD,WAjBa,SAAC,GAAD,IAAGlB,EAAH,EAAGA,KAAH,OACjB,cAACH,GAAD,CACEG,KAAMA,EACND,kBAAmB,SAACvE,GAAD,OACjBhD,EAAWoH,SAAS9E,EAAa,CAC/BqG,OAAQ3F,KAGZsE,oBAAqB,kBAAMA,EAAoBE,IAC/CC,uBAAwB,kBAAMA,EAAuBD,OASnDoB,mBAAoB,cAAC5H,EAAA,EAAD,CAAMb,MAAOC,GAAOgD,KAApB,2BAM5B,IAAMhD,GAASV,IAAWC,OAAO,CAC/BU,UAAW,CACT2D,KAAM,GAERZ,KAAM,CACJa,UAAW,GACX4E,UAAW,SACX3G,SAAU,GACVnB,MAAO,c,mBClDE+H,GAAW,SAAOxJ,GAAP,SAAAyJ,EAAAC,OAAA,2EAAAD,EAAA,MAEdE,KAAaC,QAAQ,YAAa5J,IAFpB,sDAIpB6J,QAAQC,KAAR,MAJoB,gEAQXC,GAAW,0BAAAN,EAAAC,OAAA,2EAAAD,EAAA,MAEKE,KAAaK,QAAQ,cAF1B,cAEdC,EAFc,yBAGE,OAAfA,EAAuBC,KAAKC,MAAMF,GAAyB,MAH9C,gCAKpBJ,QAAQC,KAAR,MALoB,iE,UCCjB,SAASM,GAAT,GAMsB,IAL3BrE,EAK0B,EAL1BA,SACAsE,EAI0B,EAJ1BA,QACAC,EAG0B,EAH1BA,eACAC,EAE0B,EAF1BA,oBACAC,EAC0B,EAD1BA,qBAEQjL,EAAUU,IAAVV,MAER,OACE,cAAC2B,EAAA,EAAD,UACE,cAACuJ,GAAA,EAAD,CACEC,OAAO,QACPL,QAASA,EACTM,aAAa,EACbL,eAAgBA,EAJlB,SAME,cAACpJ,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAOwB,UAA3B,SACE,eAACG,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAOqL,QAA3B,UACE,cAAClJ,EAAA,EAAD,CAAMb,MAAOC,GAAOvB,GAAOoC,MAA3B,8CAGA,cAACD,EAAA,EAAD,CACEb,MAAOC,GAAOvB,GAAOuE,KADvB,2BAEaiC,OAFb,EAEaA,EAAUpE,OAFvB,MAGA,eAACT,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAO+I,iBAA3B,UACE,cAAClH,EAAA,EAAD,CAAWC,QAASkJ,EAApB,SACE,cAAC7I,EAAA,EAAD,CAAMb,MAAOC,GAAOvB,GAAOgF,OAA3B,sBAEF,cAACnD,EAAA,EAAD,CAAWC,QAASmJ,EAApB,SACE,cAAC9I,EAAA,EAAD,CAAMb,MAAOC,GAAOvB,GAAOgF,OAA3B,mCAUhB,IAAMzD,GAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACT2D,KAAM,EACNjC,eAAgB,SAChBD,WAAY,SACZE,gBAAiB,yBAEnBkI,QAAS,CACPtI,QAAS,GACToG,MAAO,IACPC,OAAQ,IACRjG,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,QACpD+E,aAAc,GAEhBjD,MAAO,CACLiB,SAAU,GACVnB,MAAOlC,IAAUH,EAAMS,KAAO,QAAU,WAE1CiE,KAAM,CACJa,UAAW,GACXD,KAAM,EACN9B,SAAU,GACVnB,MAAOlC,IAAUH,EAAMS,KAAO,QAAU,WAE1CyI,iBAAkB,CAChB/F,cAAe,MACfC,WAAY,WACZC,eAAgB,YAElB8B,OAAQ,CACNY,WAAY,GACZ1D,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,oB,UCzEhD,SAASgL,GAAQjF,GACf,OAAQA,GACN,KAAKnB,EAAOoB,IACV,MAAO,SACT,KAAKpB,EAAOqG,UACV,MAAO,eACT,KAAKrG,EAAOsG,OACV,MAAO,sBAIN,SAASC,GAAT,GAGiB,IAFtBpF,EAEqB,EAFrBA,OACAqF,EACqB,EADrBA,oBAEQ1L,EAAUU,IAAVV,MAER,OACE,cAAC2B,EAAA,EAAD,CAAML,MAAOC,GAAO,CAAEvB,UAASwB,UAA/B,SACG,CAAC0D,EAAOoB,IAAKpB,EAAOqG,UAAWrG,EAAOsG,QAAQhE,KAAI,SAACmE,GAClD,IAAMC,EAASvF,IAAWsF,EAC1B,OACE,eAACE,GAAA,EAAD,CAEEvK,MAAO,CACLC,GAAO,CAAEqK,SAAQ5L,UAAS2L,WAC1BpK,GAAO,CAAEqK,SAAQ5L,UAAS8L,kBAE5BhK,QAAS,kBAAM4J,EAAoBC,IANrC,UAQE,cAAC,IAAD,CACE3J,KAAMsJ,GAAQK,GACd1J,KAAM,GACNC,MAAO0J,EAAS,UAAY,SAE9B,cAACzJ,EAAA,EAAD,CACEb,MAAO,CACLV,EAAaZ,GAAOiB,KACpBM,GAAO,CAAEqK,SAAQ5L,UAAS+L,gBAH9B,SAMGJ,MAlBEA,QAgCjB,IAAMpK,GAAS,SAAC,GAAD,IAAGqK,EAAH,EAAGA,OAAQ5L,EAAX,EAAWA,MAAX,OACba,IAAWC,OAAO,CAChBU,UAAW,CACTwB,cAAe,MACfE,eAAgB,gBAElByI,WAAY,CACV3I,cAAe,MACfC,WAAY,UAEd6I,iBAAkB,CAChBzG,aAAc,GACdQ,gBAAiB,EACjBC,kBAAmB,GACnB3C,gBACEyI,GAAU5L,IAAUH,EAAMI,MACtB,gBACA2L,GAAU5L,IAAUH,EAAMS,KAC1B,UACA,eAERyL,eAAgB,CACdC,YAAa,EACbC,cAAe,aACf/J,MAAO0J,EAAS,UAAY,WCxF3B,SAASM,GAAW9F,EAAeG,GACxC,OAAOH,EAAMC,QAAO,SAAC1C,GAAD,OAClBA,EAAKvB,MAAM+J,cAAcC,SAAS7F,EAAM4F,kBCOrC,SAASE,GAAT,GAAsE,IAAjD5L,EAAgD,EAAhDA,MAAOmD,EAAyC,EAAzCA,aAAc9B,EAA2B,EAA3BA,QACvC9B,EAAUU,IAAVV,MAER,OACE,eAAC2B,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAOwB,UAA3B,UACE,cAACwC,EAAA,EAAD,CACE1C,MAAO,CAACV,IAAeK,KAAMM,GAAOvB,GAAOiE,OAC3CxD,MAAOA,EACP4D,YAAY,SACZC,qBAAqB,OACrBV,aAAcA,EACd0I,gBAAiBxK,IAEnB,cAACD,EAAA,EAAD,CAAWP,MAAOC,GAAOvB,GAAOgF,OAAQlD,QAASA,EAAjD,SACE,cAAC,IAAD,CAAME,KAAK,UAAUC,KAAM,GAAIC,MAAM,cAM7C,IAAMX,GAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACT+K,eAAgB,GAChBvJ,cAAe,OAEjBiB,MAAO,CACLkB,KAAM,EACNpC,QAAS,GACTiJ,YAAa,GACbjG,YAAa,EACbyG,YAAaxM,IAAUH,EAAMS,KAAO,UAAY,OAChD+E,aAAc,EACdhC,SAAU,GACVF,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,QACpD4B,MAAOlC,IAAUH,EAAMS,KAAO,UAAY,SAE5C0E,OAAQ,CACNjC,QAAS,EACTyC,SAAU,WACViH,KAAM,EACNhH,IAAK,EACLiH,OAAQ,EACRxJ,eAAgB,aC9Cf,SAASyJ,GAAT,GAAsE,IAA7CC,EAA4C,EAA5CA,qBACtB5M,EAAUU,IAAVV,MAER,OACE,cAAC6B,EAAA,EAAD,CACEP,MAAOC,GAAOvB,GAAOwB,UACrBM,QAAS8K,EACTzB,OAAO,aAHT,SAKE,cAAC,IAAD,CAAMnJ,KAAK,OAAOC,KAAM,GAAIC,MAAM,cAKxC,IAAMX,GAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACTgE,SAAU,WACVkH,OAAQ,GACRhH,MAAO,GACPL,aAAc,GACdtC,QAAS,EACTI,gBAAiBnD,IAAUH,EAAMS,KAAO,UAAY,oBCH3C,SAASuM,KACtB,IAAMvE,EAAWN,KACThI,EAAUU,IAAVV,MACR,EAAkDkI,IAChD,SAACpB,GAAD,OAAWA,EAAMnD,QADXyC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAAQE,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,SAAUC,EAAxC,EAAwCA,MAIlCtF,EACJkH,cA6BFyE,qBAAU,YACR,mBAAA5C,EAAAC,OAAA,2EAAAD,EAAA,MAEwBM,MAFxB,QAEUpE,EAFV,SAGekC,EAAST,GAAUzB,IAHlC,gDAKIkE,QAAQC,KAAR,MALJ,gEASAwC,KACC,IAEHD,qBAAU,WACR,EAAA5C,EAAAC,OAAA,2EAAAD,EAAA,MAEUD,GAASU,KAAKqC,UAAU5G,KAFlC,sDAIIkE,QAAQC,KAAR,MAJJ,iEASC,CAACnE,IAEJ,IAAM6G,EAAgBC,mBAAQ,WAC5B,OHlFG,SACL9G,EACAC,EACAE,GAEA,OAAQF,GACN,KAAKnB,EAAOoB,IACV,OAAOC,EAAQ2F,GAAW9F,EAAOG,GAASH,EAC5C,KAAKlB,EAAOqG,UACV,IAAM4B,EAAiB/G,EAAMC,QAAO,SAAC1C,GAAD,OAA6B,IAAnBA,EAAKuD,aACnD,OAAOX,EAAQ2F,GAAWiB,EAAgB5G,GAAS4G,EACrD,KAAKjI,EAAOsG,OACV,IAAM4B,EAAchH,EAAMC,QAAO,SAAC1C,GAAD,OAA6B,IAAnBA,EAAKuD,aAChD,OAAOX,EAAQ2F,GAAWkB,EAAa7G,GAAS6G,GGqE3CC,CAAYjH,EAAOC,EAAQE,KACjC,CAACH,EAAOC,EAAQE,IAEnB,OACE,eAAC5E,EAAA,EAAD,CAAML,MAAOC,GAAOvB,GAAOwB,UAA3B,UACE,cAACqJ,GAAD,CACErE,SAAUA,EACVsE,QAASrE,EACTsE,eAAgB,kBAAMzC,EAASR,OAC/BkD,oBAAqB,kBAAM1C,EAASR,OACpCmD,qBAzC4B,WAC5BzE,GAAU8B,EAAShB,EAAWd,EAASrC,KAC3CmE,EAASR,SAyCP,cAAC2D,GAAD,CACEpF,OAAQA,EACRqF,oBAnEsB,SAACrF,GAC3BiC,EAASZ,GAAarB,OAoEpB,cAACgG,GAAD,CACE5L,MAAO8F,EACP3C,aAnE2B,SAACW,GAChC+D,EAASX,GAAYpD,KAmEjBzC,QAhEsB,WAC1BwG,EAASX,GAAYpB,IACrB+G,KAASC,aAgEP,cAAC7D,GAAD,CACEtD,MAAO6G,EACPxE,oBAAqB,SAACE,GAAD,OA/DC,SAACA,GAC3BL,EAASR,MACTQ,EAASV,GAAee,IA6DWF,CAAoBE,IACnDC,uBAAwB,SAACD,GAAD,OAAUL,EAASf,EAAaoB,EAAKxE,QAE/D,cAACwI,GAAD,CAAeC,qBA7DU,WAC3BzL,EAAWoH,SAAS9E,EAAY,UAiEpC,IAAMlC,GAAS,SAACvB,GAAD,OACba,IAAWC,OAAO,CAChBU,UAAW,CACT2D,KAAM,EACNpC,QAAS,GACTI,gBAAiBnD,IAAUH,EAAMS,KAAO,OAAS,c,UC7GxC,SAASkN,GAAT,GAA6C,IAAzBC,EAAwB,EAAxBA,MACjC,EAAsCpN,oBAAkB,GAAxD,WAAOwD,EAAP,KAAoBC,EAApB,KACM3C,EACJkH,cACIC,EAAWN,KACT8B,EAAW2D,EAAMC,OAAjB5D,OACR,EAAwB5B,IAAe,SAACpB,GAAD,OAAWA,EAAMnD,QAAhDyC,EAAR,EAAQA,MAAO7B,EAAf,EAAeA,KACf,EAAe6B,EAAMC,QAAO,SAAC1C,GAAD,OAAUA,EAAKQ,KAAO2F,KAA3CnG,EAAP,YAOA,OACE,cAAChC,EAAA,EAAD,CAAML,MAAO,CAAE6D,KAAM,GAArB,SACE,cAACzB,EAAD,CACEC,KAAMA,EACNlD,MAAO8D,EACPX,aAAc,SAACW,GAAD,OAAU+D,EAASb,GAAYlD,KAC7CzC,QAXsB,WACtByC,GAAM+D,EAASlB,EAAW,CAAEjD,GAAIR,EAAKQ,GAAI/B,MAAOmC,KACpDpD,EAAWoH,SAAS9E,EAAa,KAU7BI,YAAaA,EACbC,eAAgBA,M,+NC7BxB,IAAM6J,GAAYC,cAEH,SAASC,KAGtB,OCPK,WACL,MAAoCxN,oBAAkB,GAAtD,WAAOyN,EAAP,KAAmBC,EAAnB,KAqBA,OAnBAjB,qBAAU,WACR,EAAA5C,EAAAC,OAAA,2EAAAD,EAAA,MAEU8D,OAFV,yBAAA9D,EAAA,MAGU+D,IAAe,CACnB,cAAeC,EAAQ,KACvBC,0BACAC,0BANN,OAQIC,YAAW,oBAAAnE,EAAAC,OAAA,kEAAAD,EAAA,MAAkB8D,OAAlB,sGAA4C,KAR3D,gDAUI1D,QAAQC,KAAR,MAVJ,yBAYIwD,GAAc,GAZlB,qFAiBC,IACID,EDjBYQ,GAKjB,cAACC,EAAA,EAAD,UACE,eAACZ,GAAUa,UAAX,CACEC,iBAAkBhL,EAClBiL,cAAe,CACbC,OAAQ,SAACC,GAAD,OAAgB,cAAC1N,E,mWAAD,IAAY0N,MAHxC,UAME,cAACjB,GAAUkB,OAAX,CAAkB7M,KAAMyB,EAAaqL,UAAWjC,KAChD,cAACc,GAAUkB,OAAX,CAAkB7M,KAAMyB,EAAYqL,UAAW1G,KAC/C,cAACuF,GAAUkB,OAAX,CAAkB7M,KAAMyB,EAAaqL,UAAWtB,UAXpD,cAAC,KAAD,IEbG,IAAMuB,GAAQC,YAAe,CAClCC,QAAS,CACPtL,KAAMuL,MCAK,SAASC,KACtB,OACE,cAAC,KAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,EAAD,UACE,cAAClB,GAAD,U,0DCTRuB,EAAOC,QAAU,IAA0B,4B","file":"static/js/app.caea221d.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nexport enum Theme {\n  LIGHT = 'light',\n  DARK = 'dark'\n}\n\ninterface ThemeContextProps {\n  theme: Theme;\n  setAppTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextProps>({\n  theme: Theme.LIGHT,\n  setAppTheme: () => {}\n});\n\nexport const ThemeProvider: React.FC = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(Theme.DARK);\n\n  const setAppTheme = () => {\n    setTheme(theme === Theme.DARK ? Theme.LIGHT : Theme.DARK);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setAppTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useAppTheme = () => useContext(ThemeContext);\n","import { StyleSheet } from 'react-native';\n\nconst GlobalStyles = () =>\n  StyleSheet.create({\n    fontBold: {\n      fontFamily: 'RobotoMono_700Bold'\n    },\n    font: {\n      fontFamily: 'RobotoMono_400Regular'\n    }\n  });\n\nexport default GlobalStyles;\n","import { NativeStackHeaderProps } from '@react-navigation/native-stack';\nimport { Pressable, StyleSheet, Switch, Text, View } from 'react-native';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport { StatusBar } from 'expo-status-bar';\nimport FeatherIcon from 'react-native-vector-icons/Feather';\nimport AntIcon from 'react-native-vector-icons/AntDesign';\nimport GlobalStyles from '../../utils/GlobalStyles';\n\nexport function Header({ navigation, back }: NativeStackHeaderProps) {\n  const { theme, setAppTheme } = useAppTheme();\n\n  return (\n    <SafeAreaView style={styles(theme).container}>\n      <StatusBar hidden={true} />\n      <View style={styles(theme).logoContainer}>\n        {back && (\n          <Pressable onPress={navigation.goBack}>\n            <AntIcon\n              name=\"back\"\n              size={16}\n              style={styles(theme).back}\n              color=\"#f5f6f7\"\n            />\n          </Pressable>\n        )}\n        <Text style={[GlobalStyles().fontBold, styles(theme).title]}>\n          My Todo App\n        </Text>\n      </View>\n      <View style={styles(theme).switchContainer}>\n        <Switch\n          style={styles(theme).switch}\n          trackColor={{ false: '#ffd700', true: '#03dac6' }}\n          ios_backgroundColor=\"#ffd700\"\n          thumbColor={theme === Theme.DARK ? '#00ffbb' : 'yellow'}\n          onValueChange={setAppTheme}\n          value={theme === Theme.DARK ? true : false}\n        />\n        <FeatherIcon\n          name={theme === Theme.DARK ? 'moon' : 'sun'}\n          size={18}\n          color={theme === Theme.DARK ? '#03dac6' : 'yellow'}\n        />\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      padding: 16,\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      backgroundColor: theme === Theme.DARK ? '#242526' : 'rebeccapurple'\n    },\n    logoContainer: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    back: {\n      marginRight: 16\n    },\n    title: {\n      fontSize: 24,\n      color: '#f5f6f7'\n    },\n    switchContainer: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      paddingRight: 8\n    },\n    switch: {\n      transform: [{ scale: 0.7 }]\n    }\n  });\n","export const routes = {\n  list: 'Todos - List',\n  add: 'Todos - Add',\n  edit: 'Todos - Edit'\n} as const;\n\nexport type RootStackParamList = {\n  [routes.list]: {};\n  [routes.add]: {};\n  [routes.edit]: { todoId: string };\n};\n","import { Dispatch, SetStateAction } from 'react';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport { Todo } from '../../redux/features/todoSlice';\nimport GlobalStyles from '../../utils/GlobalStyles';\nimport {\n  Pressable,\n  StyleSheet,\n  Text,\n  TextInput,\n  View,\n  Switch\n} from 'react-native';\n\ninterface TodoFormProps {\n  todo?: Todo;\n  value: string;\n  onChangeText: (text: string) => void;\n  onPress: () => void;\n  showDetails?: boolean;\n  setShowDetails?: Dispatch<SetStateAction<boolean>>;\n}\n\nexport function TodoForm({\n  todo,\n  value,\n  onChangeText,\n  onPress,\n  showDetails,\n  setShowDetails\n}: TodoFormProps) {\n  const { theme } = useAppTheme();\n\n  return (\n    <View style={styles(theme).container}>\n      <Text style={styles(theme).title}>\n        {todo ? 'Edit todo' : 'Add new todo'}\n      </Text>\n      {todo ? (\n        <View>\n          <View>\n            <Text style={[GlobalStyles().fontBold, styles(theme).inputLabel]}>\n              Id\n            </Text>\n            <TextInput\n              style={[\n                GlobalStyles().font,\n                styles(theme).input,\n                styles(theme).inputDisabled\n              ]}\n              value={todo.id}\n              editable={false}\n            />\n          </View>\n          <View>\n            <Text style={[GlobalStyles().fontBold, styles(theme).inputLabel]}>\n              Title\n            </Text>\n            <TextInput\n              style={[GlobalStyles().font, styles(theme).input]}\n              placeholder={todo ? todo.title : 'Title'}\n              placeholderTextColor=\"gray\"\n              onChangeText={(text) => onChangeText(text)}\n              value={value}\n              autoFocus={true}\n            />\n          </View>\n          <View style={styles(theme).switchContainer}>\n            <Text style={[GlobalStyles().font, styles(theme).switchText]}>\n              Show Details\n            </Text>\n            <Switch\n              style={styles(theme).switch}\n              thumbColor={theme === Theme.DARK ? '#00ffbb' : 'rebeccapurple'}\n              trackColor={{\n                false: '#dddddd',\n                true: theme === Theme.DARK ? '#03dac6' : '#8c53c6'\n              }}\n              ios_backgroundColor={\n                theme === Theme.DARK ? '#dddddd' : 'transparent'\n              }\n              value={showDetails}\n              onValueChange={setShowDetails}\n            />\n          </View>\n          {showDetails && (\n            <View>\n              <View>\n                <Text\n                  style={[GlobalStyles().fontBold, styles(theme).inputLabel]}\n                >\n                  Version\n                </Text>\n                <TextInput\n                  style={[\n                    GlobalStyles().font,\n                    styles(theme).input,\n                    styles(theme).inputDisabled\n                  ]}\n                  value={todo.version.toString()}\n                  editable={false}\n                />\n              </View>\n              <View>\n                <Text\n                  style={[GlobalStyles().fontBold, styles(theme).inputLabel]}\n                >\n                  Created At\n                </Text>\n                <TextInput\n                  style={[\n                    GlobalStyles().font,\n                    styles(theme).input,\n                    styles(theme).inputDisabled\n                  ]}\n                  value={new Date(todo.createdAt).toLocaleString()}\n                  editable={false}\n                />\n              </View>\n              <View>\n                <Text\n                  style={[GlobalStyles().fontBold, styles(theme).inputLabel]}\n                >\n                  Updated At\n                </Text>\n                <TextInput\n                  style={[\n                    GlobalStyles().font,\n                    styles(theme).input,\n                    styles(theme).inputDisabled\n                  ]}\n                  value={\n                    todo.updatedAt\n                      ? new Date(todo?.updatedAt).toLocaleString()\n                      : 'N/A'\n                  }\n                  editable={false}\n                />\n              </View>\n            </View>\n          )}\n        </View>\n      ) : (\n        <TextInput\n          style={styles(theme).input}\n          placeholder=\"Title\"\n          placeholderTextColor=\"gray\"\n          onChangeText={(text) => onChangeText(text)}\n          value={value}\n          autoFocus={true}\n        />\n      )}\n      <Pressable style={styles(theme).button} onPress={onPress}>\n        <Text style={styles(theme).buttonText}>{todo ? 'Update' : 'Save'}</Text>\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: 16,\n      backgroundColor: theme === Theme.DARK ? '#000' : '#f5f6f7'\n    },\n    title: {\n      fontSize: 24,\n      color: theme === Theme.DARK ? '#f5f6f7' : '#18191a'\n    },\n    input: {\n      padding: 16,\n      marginTop: 16,\n      fontSize: 16,\n      backgroundColor: theme === Theme.DARK ? '#242526' : '#dddddd',\n      borderRadius: 4,\n      borderBottomWidth: 1,\n      borderBottomColor: theme === Theme.DARK ? '#f5f6f7' : 'gray',\n      color: theme === Theme.DARK ? 'white' : '#242526'\n    },\n    inputDisabled: {\n      color: 'gray'\n    },\n    inputLabel: {\n      color: 'gray',\n      position: 'absolute',\n      top: 32,\n      right: 16,\n      zIndex: 1\n    },\n    switchContainer: {\n      marginTop: 16,\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    switch: {\n      marginLeft: 8,\n      transform: [{ scale: 0.7 }]\n    },\n    switchText: {\n      color: 'gray'\n    },\n    button: {\n      paddingVertical: 8,\n      paddingHorizontal: 16,\n      marginTop: 24,\n      borderWidth: 1,\n      flexDirection: 'row',\n      alignSelf: 'flex-end',\n      borderRadius: 4,\n      backgroundColor: theme === Theme.DARK ? '#03dac6' : 'rebeccapurple'\n    },\n    buttonText: {\n      color: '#f5f6f7'\n    }\n  });\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { nanoid } from '../../utils/nanoid';\n\nexport enum Filter {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active'\n}\n\nexport interface Todo {\n  id: string;\n  title: string;\n  completed: boolean;\n  version: number;\n  createdAt: number;\n  updatedAt?: number;\n}\n\nexport interface InitialState {\n  todos: Todo[];\n  text: string;\n  filter: Filter;\n  query: string;\n  selected: Todo | null;\n  modal: boolean;\n}\n\nconst initialState: InitialState = {\n  todos: [],\n  text: '',\n  filter: Filter.ALL,\n  query: '',\n  selected: null,\n  modal: false\n};\n\nexport const todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    addTodo: (state, action: PayloadAction<string>) => {\n      state.todos = [\n        ...state.todos,\n        {\n          id: nanoid(),\n          title: action.payload.trim(),\n          completed: false,\n          version: 1,\n          createdAt: Date.now()\n        }\n      ];\n      state.text = '';\n    },\n    updateTodo: (\n      state,\n      action: PayloadAction<{ id: string; title: string }>\n    ) => {\n      const todo = state.todos.find((todo) => todo.id === action.payload.id);\n      if (todo) {\n        todo.title = action.payload.title.trim();\n        todo.version = todo.version + 1;\n        todo.updatedAt = Date.now();\n      }\n      state.text = '';\n    },\n    deleteTodo: (state, action: PayloadAction<string>) => {\n      state.todos = state.todos.filter((todo) => todo.id !== action.payload);\n    },\n    completeTodo: (state, action: PayloadAction<string>) => {\n      state.todos = state.todos.map((todo) =>\n        todo.id === action.payload\n          ? { ...todo, completed: !todo.completed }\n          : todo\n      );\n    },\n    changeInput: (state, action: PayloadAction<string>) => {\n      state.text = action.payload;\n    },\n    changeFilter: (state, action: PayloadAction<Filter>) => {\n      state.filter = action.payload;\n    },\n    changeQuery: (state, action: PayloadAction<string>) => {\n      state.query = action.payload;\n    },\n    changeSelected: (state, action: PayloadAction<Todo>) => {\n      state.selected = action.payload;\n    },\n    initTodos: (state, action: PayloadAction<Todo[]>) => {\n      state.todos = action.payload;\n    },\n    showModal: (state) => {\n      state.modal = !state.modal;\n    }\n  }\n});\n\nexport const {\n  addTodo,\n  updateTodo,\n  deleteTodo,\n  completeTodo,\n  changeInput,\n  changeFilter,\n  changeQuery,\n  changeSelected,\n  initTodos,\n  showModal\n} = todoSlice.actions;\n\nexport default todoSlice.reducer;\n","import { customAlphabet } from 'nanoid/non-secure';\n\nexport const nanoid = customAlphabet('1234567890abcdef', 10);\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { View } from 'react-native';\nimport { TodoForm } from '../components/TodoForm';\nimport { addTodo, changeInput } from '../redux/features/todoSlice';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { routes } from '../routes';\nimport { RootStackParamList } from '../routes';\n\nexport default function AddTodo() {\n  const navigation =\n    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n  const dispatch = useAppDispatch();\n  const { text } = useAppSelector((state) => state.todo);\n\n  const handleOnPress = () => {\n    if (text) dispatch(addTodo(text));\n    navigation.navigate(routes.list, {});\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <TodoForm\n        value={text}\n        onChangeText={(text) => dispatch(changeInput(text))}\n        onPress={handleOnPress}\n      />\n    </View>\n  );\n}\n","import { Pressable, StyleSheet, Text, View } from 'react-native';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport { Todo } from '../../redux/features/todoSlice';\nimport Checkbox from 'expo-checkbox';\nimport Icon from 'react-native-vector-icons/AntDesign';\nimport GlobalStyles from '../../utils/GlobalStyles';\n\ninterface TodoItemProps {\n  item: Todo;\n  handleDeleteOnPress: () => void;\n  handleEditOnPress: (id: string) => void;\n  handleCheckboxOnChange: () => void;\n}\n\nexport function TodoItem({\n  handleDeleteOnPress,\n  handleEditOnPress,\n  item,\n  handleCheckboxOnChange\n}: TodoItemProps) {\n  const { theme } = useAppTheme();\n\n  return (\n    <View style={styles(theme).container}>\n      <Checkbox\n        value={item.completed}\n        onValueChange={handleCheckboxOnChange}\n        color={theme === Theme.DARK ? '#03dac6' : 'rebeccapurple'}\n      />\n      <Text\n        style={[\n          GlobalStyles().font,\n          styles(theme).text,\n          item.completed && styles(theme).completed\n        ]}\n        numberOfLines={2}\n      >\n        {item.title}\n      </Text>\n      <View style={styles(theme).buttonsContainer}>\n        <Pressable onPress={() => handleEditOnPress(item.id)}>\n          <Icon\n            name=\"edit\"\n            size={16}\n            color={theme === Theme.DARK ? '#f5f6f7' : '#18191a'}\n            style={styles(theme).button}\n          />\n        </Pressable>\n        <Pressable onPress={handleDeleteOnPress}>\n          <Icon\n            name=\"delete\"\n            size={16}\n            color={theme === Theme.DARK ? '#f5f6f7' : '#18191a'}\n          />\n        </Pressable>\n      </View>\n    </View>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      backgroundColor: theme === Theme.DARK ? '#242526' : 'white',\n      marginBottom: 8,\n      padding: 16,\n      borderRadius: 4,\n      shadowColor: theme === Theme.DARK ? 'white' : '#000',\n      shadowOffset: { width: 0, height: 2 },\n      shadowOpacity: 0.1,\n      shadowRadius: 4,\n      elevation: 6\n    },\n    text: {\n      flex: 1,\n      marginLeft: 16,\n      fontSize: 16,\n      color: theme === Theme.DARK ? '#f5f6f7' : '#18191a'\n    },\n    completed: {\n      color: 'gray',\n      textDecorationStyle: 'solid',\n      textDecorationLine: 'line-through'\n    },\n    buttonsContainer: {\n      flexDirection: 'row'\n    },\n    button: {\n      marginRight: 16\n    }\n  });\n","import { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { FlatList, StyleSheet, Text, View } from 'react-native';\nimport { Todo } from '../../redux/features/todoSlice';\nimport { RootStackParamList, routes } from '../../routes';\nimport { TodoItem } from '../TodoItem';\n\ninterface TodoListProps {\n  todos: Todo[];\n  handleDeleteOnPress: (item: Todo) => void;\n  handleCheckboxOnChange: (item: Todo) => void;\n}\n\nexport function TodoList({\n  todos,\n  handleDeleteOnPress,\n  handleCheckboxOnChange\n}: TodoListProps) {\n  const navigation =\n    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n\n  const renderItem = ({ item }: { item: Todo }) => (\n    <TodoItem\n      item={item}\n      handleEditOnPress={(id) =>\n        navigation.navigate(routes.edit, {\n          todoId: id\n        })\n      }\n      handleDeleteOnPress={() => handleDeleteOnPress(item)}\n      handleCheckboxOnChange={() => handleCheckboxOnChange(item)}\n    />\n  );\n\n  return (\n    <View style={styles.container}>\n      <FlatList\n        data={todos}\n        renderItem={renderItem}\n        ListEmptyComponent={<Text style={styles.text}>No Todos.</Text>}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  text: {\n    marginTop: 24,\n    textAlign: 'center',\n    fontSize: 16,\n    color: 'darkgray'\n  }\n});\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { Todo } from '../redux/features/todoSlice';\n\nexport const saveData = async (value: string) => {\n  try {\n    await AsyncStorage.setItem('mytodoapp', value);\n  } catch (e) {\n    console.warn(e);\n  }\n};\n\nexport const loadData = async () => {\n  try {\n    const stringData = await AsyncStorage.getItem('mytodoapp');\n    return stringData !== null ? (JSON.parse(stringData) as Todo[]) : null;\n  } catch (e) {\n    console.warn(e);\n  }\n};\n","import { Modal, Pressable, StyleSheet, Text, View } from 'react-native';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport { Todo } from '../../redux/features/todoSlice';\n\ninterface ConfirmDeleteModalProps {\n  selected: Todo | null;\n  visible: boolean;\n  onRequestClose: () => void;\n  handleCancleOnpress: () => void;\n  handleConfirmOnPress: () => void;\n}\n\nexport function ConfirmDeleteModal({\n  selected,\n  visible,\n  onRequestClose,\n  handleCancleOnpress,\n  handleConfirmOnPress\n}: ConfirmDeleteModalProps) {\n  const { theme } = useAppTheme();\n\n  return (\n    <View>\n      <Modal\n        testID=\"modal\"\n        visible={visible}\n        transparent={true}\n        onRequestClose={onRequestClose}\n      >\n        <View style={styles(theme).container}>\n          <View style={styles(theme).content}>\n            <Text style={styles(theme).title}>\n              Do you want to delete this todo?\n            </Text>\n            <Text\n              style={styles(theme).text}\n            >{`Delete \"${selected?.title}\"`}</Text>\n            <View style={styles(theme).buttonsContainer}>\n              <Pressable onPress={handleCancleOnpress}>\n                <Text style={styles(theme).button}>CANCEL</Text>\n              </Pressable>\n              <Pressable onPress={handleConfirmOnPress}>\n                <Text style={styles(theme).button}>CONFIRM</Text>\n              </Pressable>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'rgba(56, 56, 56, 0.5)'\n    },\n    content: {\n      padding: 16,\n      width: 300,\n      height: 200,\n      backgroundColor: theme === Theme.DARK ? '#383838' : 'white',\n      borderRadius: 4\n    },\n    title: {\n      fontSize: 20,\n      color: theme === Theme.DARK ? 'white' : '#18191a'\n    },\n    text: {\n      marginTop: 24,\n      flex: 1,\n      fontSize: 16,\n      color: theme === Theme.DARK ? 'white' : '#18191a'\n    },\n    buttonsContainer: {\n      flexDirection: 'row',\n      alignItems: 'flex-end',\n      justifyContent: 'flex-end'\n    },\n    button: {\n      marginLeft: 16,\n      color: theme === Theme.DARK ? '#03dac6' : 'rebeccapurple'\n    }\n  });\n","import { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport { Filter } from '../../redux/features/todoSlice';\nimport Icon from 'react-native-vector-icons/AntDesign';\nimport GlobalStyles from '../../utils/GlobalStyles';\n\ninterface FilterButtonsProps {\n  filter: Filter;\n  handleFilterOnPress: (filterItem: Filter) => void;\n}\n\nfunction getIcon(filter: Filter): string {\n  switch (filter) {\n    case Filter.ALL:\n      return 'filter';\n    case Filter.COMPLETED:\n      return 'checksquareo';\n    case Filter.ACTIVE:\n      return 'exclamationcircleo';\n  }\n}\n\nexport function FilterButtons({\n  filter,\n  handleFilterOnPress\n}: FilterButtonsProps) {\n  const { theme } = useAppTheme();\n\n  return (\n    <View style={styles({ theme }).container}>\n      {[Filter.ALL, Filter.COMPLETED, Filter.ACTIVE].map((filterItem) => {\n        const active = filter === filterItem;\n        return (\n          <TouchableOpacity\n            key={filterItem}\n            style={[\n              styles({ active, theme }).filterItem,\n              styles({ active, theme }).filterItemActive\n            ]}\n            onPress={() => handleFilterOnPress(filterItem)}\n          >\n            <Icon\n              name={getIcon(filterItem)}\n              size={16}\n              color={active ? '#f5f6f7' : 'gray'}\n            />\n            <Text\n              style={[\n                GlobalStyles(theme).font,\n                styles({ active, theme }).filterItemText\n              ]}\n            >\n              {filterItem}\n            </Text>\n          </TouchableOpacity>\n        );\n      })}\n    </View>\n  );\n}\n\ninterface StyleProps {\n  active?: boolean;\n  theme: Theme;\n}\n\nconst styles = ({ active, theme }: StyleProps) =>\n  StyleSheet.create({\n    container: {\n      flexDirection: 'row',\n      justifyContent: 'space-around'\n    },\n    filterItem: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    filterItemActive: {\n      borderRadius: 50,\n      paddingVertical: 2,\n      paddingHorizontal: 16,\n      backgroundColor:\n        active && theme === Theme.LIGHT\n          ? 'rebeccapurple'\n          : active && theme === Theme.DARK\n          ? '#03dac6'\n          : 'transparent'\n    },\n    filterItemText: {\n      paddingLeft: 2,\n      textTransform: 'capitalize',\n      color: active ? '#f5f6f7' : 'gray'\n    }\n  });\n","import { Filter, Todo } from '../redux/features/todoSlice';\n\nexport function queryTodos(todos: Todo[], query: string) {\n  return todos.filter((todo) =>\n    todo.title.toLowerCase().includes(query.toLowerCase())\n  );\n}\n\nexport function filterTodos(\n  todos: Todo[],\n  filter: Filter,\n  query?: string\n): Todo[] {\n  switch (filter) {\n    case Filter.ALL:\n      return query ? queryTodos(todos, query) : todos;\n    case Filter.COMPLETED:\n      const completedTodos = todos.filter((todo) => todo.completed === true);\n      return query ? queryTodos(completedTodos, query) : completedTodos;\n    case Filter.ACTIVE:\n      const activeTodos = todos.filter((todo) => todo.completed === false);\n      return query ? queryTodos(activeTodos, query) : activeTodos;\n  }\n}\n","import Icon from 'react-native-vector-icons/AntDesign';\nimport { Pressable, StyleSheet, TextInput, View } from 'react-native';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport GlobalStyles from '../../utils/GlobalStyles';\n\ninterface SearchBarProps {\n  value: string;\n  onChangeText: (text: string) => void;\n  onPress: () => void;\n}\n\nexport function SearchBar({ value, onChangeText, onPress }: SearchBarProps) {\n  const { theme } = useAppTheme();\n\n  return (\n    <View style={styles(theme).container}>\n      <TextInput\n        style={[GlobalStyles().font, styles(theme).input]}\n        value={value}\n        placeholder=\"Search\"\n        placeholderTextColor=\"gray\"\n        onChangeText={onChangeText}\n        onSubmitEditing={onPress}\n      />\n      <Pressable style={styles(theme).button} onPress={onPress}>\n        <Icon name=\"search1\" size={16} color=\"gray\" />\n      </Pressable>\n    </View>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      marginVertical: 16,\n      flexDirection: 'row'\n    },\n    input: {\n      flex: 1,\n      padding: 16,\n      paddingLeft: 40,\n      borderWidth: 1,\n      borderColor: theme === Theme.DARK ? '#f5f6f7' : 'gray',\n      borderRadius: 4,\n      fontSize: 16,\n      backgroundColor: theme === Theme.DARK ? '#242526' : 'white',\n      color: theme === Theme.DARK ? '#f5f6f7' : 'black'\n    },\n    button: {\n      padding: 8,\n      position: 'absolute',\n      left: 8,\n      top: 0,\n      bottom: 0,\n      justifyContent: 'center'\n    }\n  });\n","import { Pressable, StyleSheet } from 'react-native';\nimport { Theme, useAppTheme } from '../../context/theme';\nimport Icon from 'react-native-vector-icons/AntDesign';\n\ninterface AddTodoButtonProps {\n  handleAddTodoOnPress: () => void;\n}\n\nexport function AddTodoButton({ handleAddTodoOnPress }: AddTodoButtonProps) {\n  const { theme } = useAppTheme();\n\n  return (\n    <Pressable\n      style={styles(theme).container}\n      onPress={handleAddTodoOnPress}\n      testID=\"add-button\"\n    >\n      <Icon name=\"plus\" size={32} color=\"#f5f6f7\" />\n    </Pressable>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      position: 'absolute',\n      bottom: 16,\n      right: 16,\n      borderRadius: 50,\n      padding: 8,\n      backgroundColor: theme === Theme.DARK ? '#03dac6' : 'rebeccapurple'\n    }\n  });\n","import { useNavigation } from '@react-navigation/native';\nimport { NativeStackNavigationProp } from '@react-navigation/native-stack';\nimport { TodoList } from '../components/TodoList';\nimport { Theme, useAppTheme } from '../context/theme';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { routes } from '../routes';\nimport { RootStackParamList } from '../routes';\nimport { Keyboard, StyleSheet, View } from 'react-native';\nimport { useEffect, useMemo } from 'react';\nimport { loadData, saveData } from '../utils/storage';\nimport { ConfirmDeleteModal } from '../components/ConfirmDeleteModal';\nimport { FilterButtons } from '../components/FilterButtons';\nimport { filterTodos } from '../utils/filter';\nimport { SearchBar } from '../components/SearchBar';\nimport { AddTodoButton } from '../components/AddTodoButton';\nimport {\n  changeFilter,\n  changeQuery,\n  changeSelected,\n  completeTodo,\n  deleteTodo,\n  Filter,\n  initTodos,\n  showModal,\n  Todo\n} from '../redux/features/todoSlice';\n\nexport default function ListTodos() {\n  const dispatch = useAppDispatch();\n  const { theme } = useAppTheme();\n  const { todos, filter, query, selected, modal } = useAppSelector(\n    (state) => state.todo\n  );\n\n  const navigation =\n    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n\n  const handleFilterOnPress = (filter: Filter) => {\n    dispatch(changeFilter(filter));\n  };\n\n  const handleSearchOnChangeText = (text: string) => {\n    dispatch(changeQuery(text));\n  };\n\n  const handleSearchOnPress = () => {\n    dispatch(changeQuery(query));\n    Keyboard.dismiss();\n  };\n\n  const handleDeleteOnPress = (item: Todo) => {\n    dispatch(showModal());\n    dispatch(changeSelected(item));\n  };\n\n  const handleAddTodoOnPress = () => {\n    navigation.navigate(routes.add, {});\n  };\n\n  const handleModalConfirmOnPress = () => {\n    if (selected) dispatch(deleteTodo(selected.id));\n    dispatch(showModal());\n  };\n\n  useEffect(() => {\n    async function initialize() {\n      try {\n        const todos = await loadData();\n        if (todos) dispatch(initTodos(todos));\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    initialize();\n  }, []);\n\n  useEffect(() => {\n    async function saveTodosLocally() {\n      try {\n        await saveData(JSON.stringify(todos));\n      } catch (e) {\n        console.warn(e);\n      }\n    }\n\n    saveTodosLocally();\n  }, [todos]);\n\n  const filteredTodos = useMemo(() => {\n    return filterTodos(todos, filter, query);\n  }, [todos, filter, query]);\n\n  return (\n    <View style={styles(theme).container}>\n      <ConfirmDeleteModal\n        selected={selected}\n        visible={modal}\n        onRequestClose={() => dispatch(showModal())}\n        handleCancleOnpress={() => dispatch(showModal())}\n        handleConfirmOnPress={handleModalConfirmOnPress}\n      />\n      <FilterButtons\n        filter={filter}\n        handleFilterOnPress={handleFilterOnPress}\n      />\n      <SearchBar\n        value={query}\n        onChangeText={handleSearchOnChangeText}\n        onPress={handleSearchOnPress}\n      />\n      <TodoList\n        todos={filteredTodos}\n        handleDeleteOnPress={(item) => handleDeleteOnPress(item)}\n        handleCheckboxOnChange={(item) => dispatch(completeTodo(item.id))}\n      />\n      <AddTodoButton handleAddTodoOnPress={handleAddTodoOnPress} />\n    </View>\n  );\n}\n\nconst styles = (theme: Theme) =>\n  StyleSheet.create({\n    container: {\n      flex: 1,\n      padding: 16,\n      backgroundColor: theme === Theme.DARK ? '#000' : '#f5f6f7'\n    }\n  });\n","import { View } from 'react-native';\nimport { RootStackParamList, routes } from '../routes';\nimport { useAppDispatch, useAppSelector } from '../redux/hooks';\nimport { TodoForm } from '../components/TodoForm';\nimport { changeInput, updateTodo } from '../redux/features/todoSlice';\nimport { useNavigation } from '@react-navigation/native';\nimport { useState } from 'react';\nimport {\n  NativeStackNavigationProp,\n  NativeStackScreenProps\n} from '@react-navigation/native-stack';\n\nexport type EditTodoProps = NativeStackScreenProps<\n  RootStackParamList,\n  typeof routes.edit\n>;\n\nexport default function EditTodo({ route }: EditTodoProps) {\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n  const navigation =\n    useNavigation<NativeStackNavigationProp<RootStackParamList>>();\n  const dispatch = useAppDispatch();\n  const { todoId } = route.params;\n  const { todos, text } = useAppSelector((state) => state.todo);\n  const [todo] = todos.filter((todo) => todo.id === todoId);\n\n  const handleUpdateOnPress = () => {\n    if (text) dispatch(updateTodo({ id: todo.id, title: text }));\n    navigation.navigate(routes.list, {});\n  };\n\n  return (\n    <View style={{ flex: 1 }}>\n      <TodoForm\n        todo={todo}\n        value={text}\n        onChangeText={(text) => dispatch(changeInput(text))}\n        onPress={handleUpdateOnPress}\n        showDetails={showDetails}\n        setShowDetails={setShowDetails}\n      />\n    </View>\n  );\n}\n","import { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Header } from '../components/Header';\nimport { useSplashScreen } from '../hooks/useSplashScreen';\nimport { RootStackParamList, routes } from '../routes';\nimport AddTodo from './AddTodo';\nimport ListTodos from './ListTodos';\nimport AppLoading from 'expo-app-loading';\nimport EditTodo from './EditTodo';\n\nconst RootStack = createStackNavigator<RootStackParamList>();\n\nexport default function Main() {\n  const isAppReady = useSplashScreen();\n\n  return !isAppReady ? (\n    <AppLoading />\n  ) : (\n    <NavigationContainer>\n      <RootStack.Navigator\n        initialRouteName={routes.list}\n        screenOptions={{\n          header: (props: any) => <Header {...props} />\n        }}\n      >\n        <RootStack.Screen name={routes.list} component={ListTodos} />\n        <RootStack.Screen name={routes.add} component={AddTodo} />\n        <RootStack.Screen name={routes.edit} component={EditTodo} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as Font from 'expo-font';\nimport {\n  RobotoMono_400Regular,\n  RobotoMono_700Bold\n} from '@expo-google-fonts/roboto-mono';\n\nexport function useSplashScreen() {\n  const [isAppReady, setIsAppReady] = useState<boolean>(false);\n\n  useEffect(() => {\n    async function initialize() {\n      try {\n        await SplashScreen.preventAutoHideAsync();\n        await Font.loadAsync({\n          'Inter-Black': require('../../assets/fonts/Inter-Black.otf'),\n          RobotoMono_400Regular,\n          RobotoMono_700Bold\n        });\n        setTimeout(async () => await SplashScreen.hideAsync(), 2000);\n      } catch (e) {\n        console.warn(e);\n      } finally {\n        setIsAppReady(true);\n      }\n    }\n\n    initialize();\n  }, []);\n  return isAppReady;\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport todoSliceReducer from './features/todoSlice';\n\nexport const store = configureStore({\n  reducer: {\n    todo: todoSliceReducer\n  }\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import Main from './src/screens/Main';\nimport { Provider } from 'react-redux';\nimport { store } from './src/redux/store';\nimport { ThemeProvider } from './src/context/theme';\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <ThemeProvider>\n        <Main />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n","module.exports = __webpack_public_path__ + \"./fonts/Inter-Black.otf\";"],"sourceRoot":""}